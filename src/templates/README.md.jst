# {{= it.api.title() }}

Browser and node module for making API requests against [{{= it.api.title() }}]({{= it.api.baseUri() }}).

## Installation

```
npm install {{= it.helpers.param(it.api.title()) }} --save
bower install {{= it.helpers.param(it.api.title()) }} --save
```

## Usage

### Node

```javascript
var {{= it.helpers.pascal(it.api.title()) }} = require('{{= it.helpers.param(it.api.title()) }}');

var client = new {{= it.helpers.pascal(it.api.title()) }}();
```

### Browsers

```html
<script src="{{= it.helpers.param(it.api.title()) }}/index.js"></script>

<script>
  var client = new {{= it.helpers.pascal(it.api.title()) }}();
</script>
```

{{? it.api.securitySchemes().some(function (x) { return x.type() === 'OAuth 2.0' }) }}
### Authentication

#### OAuth 2.0

This API supports authentication with [OAuth 2.0](https://github.com/mulesoft/js-client-oauth2). Initialize the `OAuth2` instance with the application client id, client secret and a redirect uri to authenticate with users.

```js
var auth = new {{= it.helpers.pascal(it.api.title()) }}.security.<method>({
  clientId:     '123',
  clientSecret: 'abc',
  redirectUri:  'http://example.com/auth/callback'
});

// Available methods for OAuth 2.0:{{~ it.api.securitySchemes().filter(function (x) { return x.type() === 'OAuth 2.0'}) :scheme }}
// - {{= it.helpers.camel(scheme.type()) }}
{{~}}
```

**All `getToken()` calls are asynchronous and return promise objects which resolve to an access token instance.**

##### [Authorization Code Grant](https://github.com/mulesoft/js-client-oauth2#authorization-code-grant)

1. Redirect user to `auth.code.getUri()`.
2. Parse response uri and get an access token instance using `auth.code.getToken(uri)`.

##### [Implicit Grant](https://github.com/mulesoft/js-client-oauth2#implicit-grant)

1. Redirect user to `auth.token.getUri()` in a browser.
2. Parse response uri and get an access token instance using `auth.token.getToken(uri)`.

##### [Resource Owner Password Credentials Grant](https://github.com/mulesoft/js-client-oauth2#resource-owner-password-credentials-grant)

1. Make a direct request for the access token on behalf of the user using `auth.owner.getToken(username, password)`.

##### [Client Credentials Grant](https://github.com/mulesoft/js-client-oauth2#client-credentials-grant)

1. Get the access token for the application by using `auth.credentials.getToken()`.

##### Access Tokens

Access token instances can be manually re-created. This is critical for access token reuse, such as saving credentials to a database for reusing later in the codebase.

```js
var token = auth.createToken('access token', 'refresh token');
```

An access token instance (manually created or automatically generated by a `getToken()` method) can be passed into any API request. This will sign the API request with the current users access token credentials.

```js
// Existing API client instance.
client.resource('/').get(null, {
  user: token
});

// New API client instance.
var client = new {{= it.helpers.pascal(it.api.title()) }}({
  user: token
});
```

{{?}}### Options

You can set options when you initialize a client or at any time with the `options` property. You may also override options for a single request by passing an object as the second argument of any request method. For example:

```javascript
var client = new {{= it.helpers.pascal(it.api.title()) }}({ ... });

client.options = { ... };

client.resource('/').get(null, {
  baseUri: 'http://example.com',
  headers: {
    'Content-Type': 'application/json'
  }
});
```

#### Base URI

You can override the base URI by setting the `baseUri` property, or initializing a client with a base URI. For example:

```javascript
new {{= it.helpers.pascal(it.api.title()) }}({
  baseUri: 'https://example.com'
});
```

#### Base URI Parameters

If the base URI has parameters inline, you can set them by updating the `baseUriParameters` property. For example:

```javascript
client.options.baseUriParameters.version = '{{? it.api.version() }}{{= it.api.version() }}{{??}}v3{{?}}';
```

### Resources

All methods return a HTTP request instance of [Popsicle](https://github.com/blakeembrey/popsicle), which allows the use of promises (and streaming in node).

{{~ it.api.allResources() : resource }}#### {{= it.helpers.requestSnippet(resource) }}

{{? resource.allUriParameters().length }}{{= it.helpers.parametersSnippet(resource.allUriParameters()) }}

{{?}}{{? resource.description() }}{{= resource.description() }}

{{?}}
```js
var resource = client.{{= it.helpers.requestSnippet(resource) }};
```

{{~ resource.methods() : method }}##### {{= method.method().toUpperCase() }}

{{? method.description() }}{{= method.description() }}

{{?}}
{{~}}{{~}}

## License

Apache 2.0
